import { defineFeature } from "condu/defineFeature.js";
import { pick } from "remeda";
import type {
  ContextProvidedToEslintConfig,
  EslintFeatureInput,
} from "./types.js";
import path from "node:path";
import { CONDU_CONFIG_DIR_NAME } from "@condu/types/constants.js";

const RUNNING_SOURCE_VERSION = import.meta.url.endsWith(".ts");

export interface EslintFeatureConfig extends EslintFeatureInput {
  importAdditionalConfigFrom?: string;
}

export interface EslintFeaturePeerContext extends Required<EslintFeatureInput> {
  importAdditionalConfigFrom?: string;
}

declare module "@condu/types/extendable.js" {
  interface PeerContext {
    eslint: EslintFeaturePeerContext;
  }
  // interface FileNameToSerializedTypeMapping {
  //   ".gitignore": Array<string>;
  // }
}

export const eslint = (config: EslintFeatureConfig = {}) =>
  defineFeature({
    name: "eslint",
    initialPeerContext: {
      ...config,
      defaultRules: config.defaultRules ?? {},
      ignores: config.ignores ?? [],
    },
    modifyPeerContexts: (project, initialPeerContext) => ({
      global: (current) => ({
        ...current,
        execWithTsSupport:
          current.execWithTsSupport ||
          RUNNING_SOURCE_VERSION ||
          initialPeerContext.importAdditionalConfigFrom?.endsWith(".ts"),
      }),
    }),
    defineRecipe(
      register,
      { defaultRules, ignores, importAdditionalConfigFrom },
    ) {
      const needsTypeScript =
        register.project.config.globalPeerContext.execWithTsSupport;

      register.inRoot.generateFile("eslint.config.js", {
        content({ globalRegistry, targetPackage }) {
          const eslintContext: ContextProvidedToEslintConfig = {
            ...pick(register.project.config, ["conventions", "projects"]),
            ignores: [
              ...globalRegistry.files.map(([filePath]) => filePath),
              ...ignores,
            ],
            defaultRules,
          };
          return /* ts */ `
// note: this file was auto-generated by condu
// if you want to make changes, edit the .config/condu.ts file instead

import { getConfigs } from "@condu-feature/eslint/config.${needsTypeScript ? "ts" : "js"}";
${importAdditionalConfigFrom ? `import additionalConfigs from "./${CONDU_CONFIG_DIR_NAME}/${path.normalize(importAdditionalConfigFrom)}";` : ""}
const configs = getConfigs(${JSON.stringify(eslintContext, undefined, 2)}${importAdditionalConfigFrom ? ", additionalConfigs" : ""});
export default configs;
`.trimStart();
        },
      });

      register.inRoot.addManagedDependency({
        name: "eslint",
        list: "devDependencies",
      });
    },
  });

/*
    actionFn: (config, state) => {
      const needsTypeScript =
        RUNNING_SOURCE_VERSION || importAdditionalConfigFrom?.endsWith(".ts");
      return {
        autolinkIgnore: importAdditionalConfigFrom
          ? [importAdditionalConfigFrom]
          : [],
        effects: [
          {
            files: [
              {
                path: "eslint.config.js",
                content: () => {
                  const eslintContext: ContextProvidedToEslintConfig = {
                    ...pick(config, ["conventions", "projects"]),
                    ignores: [
                      ...state.files.map(({ path: p, targetDir }) =>
                        targetDir === "."
                          ? `${p}`
                          : `${targetDir}/${path.normalize(p)}`,
                      ),
                      ...ignores,
                    ],
                    defaultRules,
                  };
                  return `// note: this file was auto-generated by condu
// if you want to make changes, edit the .config/condu.ts file instead

import { getConfigs } from "@condu-feature/eslint/config.${
                    needsTypeScript ? "ts" : "js"
                  }";
${importAdditionalConfigFrom ? `import additionalConfigs from "./.config/${path.normalize(importAdditionalConfigFrom)}";` : ""}
const configs = getConfigs(${JSON.stringify(eslintContext, undefined, 2)}${importAdditionalConfigFrom ? ", additionalConfigs" : ""});
export default configs;\n`;
                },
              },
            ],
            devDependencies: [
              "eslint",
              "eslint-plugin-import-x",
              "eslint-plugin-unicorn",
              "eslint-import-resolver-typescript",
              "@eslint/js",
              "@typescript-eslint/parser",
              "@typescript-eslint/eslint-plugin",
              ...(needsTypeScript ? ["tsx"] : []),
            ],
            tasks: [
              {
                name: "eslint",
                type: "test",
                definition: {
                  command: "eslint",
                  inputs: ["@group(sources)"],
                  ...(needsTypeScript
                    ? {
                        // TODO: consider node strip types instead
                        env: { NODE_OPTIONS: "--import tsx/esm" },
                      }
                    : {}),
                },
              },
            ],
          },
        ],
      };
    },
    */
