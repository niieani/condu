import { ProjectManifest } from "@pnpm/types";
import { SwapArrayPropertiesToReadonlyArrays } from "./utils-ts/mapType.js";
import type { PartialWorkspaceProjects } from "@moonrepo/types";
import { WorkspaceProjectsConvention } from "../cli/getProjectGlobsFromMoonConfig.js";

export interface Task {
  name: string;
  type: "test" | "build" | "execute" | "publish";
}

export interface FileDef {
  // should this file be ephemeral and is always regenerated by the apply tool (default),
  // if so, does it need to be published, or should it be committed?
  // will affect the behavior for features like gitignore and npmignore:
  type?: "ephemeral" | "publish" | "commit";
  content?: string;
  path: string;
  /** list of target packages inside of which the file will be created/updated */
  targetPackages?: string[];
}

export interface FinalState {
  /** these files will be created during execution */
  files: FileDef[];
  /** we'll ensure these dependencies are installed during execution */
  devDependencies: string[];
  tasks: Task[];
}

export type State = SwapArrayPropertiesToReadonlyArrays<FinalState>;

export type FeatureActionFn = (
  config: RepoConfigWithInferredValues,
  state: State,
) => Partial<State> | Promise<Partial<State>>;

export interface FeatureDefinition {
  actionFn: FeatureActionFn;
  name: string;
  order?: {
    after?: Array<string>;
    priority?: "beginning" | "end";
  };
}

interface Conventions {
  /** @default 'src' */
  sourceDir?: string;
}

export interface RepoConfig {
  /** primary engine used to run the tool */
  engine: "node" | "bun";
  features: FeatureDefinition[];
  monorepo?: boolean | undefined;
  projects?: WorkspaceProjectsConvention[];
  conventions?: Conventions;
}

export const CONFIGURED = Symbol("Configured");

export interface ConfiguredRepoConfig extends RepoConfig {
  [CONFIGURED]: true;
}

export const configure = (config: RepoConfig): ConfiguredRepoConfig => ({
  ...config,
  [CONFIGURED]: true,
});

export interface RepoConfigWithInferredValues extends RepoConfig {
  manifest: ProjectManifest;
  workspaceDir: string;
  conventions: Required<Conventions>;
}
