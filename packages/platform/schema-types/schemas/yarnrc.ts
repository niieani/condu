/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * They'll be normalized, compressed, and saved under the form of zip archives with standardized names. The cache is deemed to be relatively safe to be shared by multiple projects, even when multiple Yarn instances run at the same time on different projects. For setting a global cache folder, you should use `enableGlobalCache` instead.
 */
export type PathWhereTheDownloadedPackagesAreStoredOnYourSystem = string;
/**
 * Whether or not a cache entry is outdated depends on whether it has been built and checksumed by an earlier release of Yarn, or under a different compression settings. Possible behaviors are:
 *
 * - If `required-only`, it'll keep using the file as-is, unless the version that generated it was decidedly too old.
 * - If `match-spec`, it'll also rebuild the file if the compression level has changed. If `always`, it'll always regenerate the cache files so they use the current cache version.
 * - If `auto` (the default), it'll act as either `required-only` or `always` depending on whether `enableGlobalCache` is enabled (with `always` being selected in that case).
 */
export type BehaviorThatYarnShouldFollowWhenItDetectsThatACacheEntryIsOutdated =
  | "required-only"
  | "match-spec"
  | "always"
  | "auto";
export type PathToAFileContainingOneOrMultipleCertificateAuthoritySigningCertificates = string;
/**
 * Supports git branches, tags, and commits. The default configuration will compare against master, origin/master, upstream/master, main, origin/main, and upstream/main.
 */
export type ListOfGitRefsAgainstWhichYarnWillCompareYourBranchWhenItNeedsToDetectChanges = string[];
/**
 * Files matching the following patterns (in terms of relative paths compared to the root of the project) will be ignored by every command checking whether files changed compared to the base ref (this include both `yarn version check` and `yarn workspaces foreach --since`).
 */
export type ArrayOfFileGlobPatternsThatWillBeExcludedFromChangeDetection = string[];
/**
 * Possible behaviors are:
 *
 * - If `throw` (the default), Yarn will throw an exception.
 * - If `update`, the lockfile will be updated to match the cached checksum.
 * - If `reset`, the cache entry will be purged and fetched anew.
 * - If `ignore`, nothing will happen, Yarn will skip the check.
 */
export type BehaviorThatYarnShouldFollowWhenItDetectsThatACacheEntryHasADifferentChecksumThanExpected =
  | "throw"
  | "update"
  | "ignore"
  | "reset";
/**
 * We by default limit it to 2 concurrent clone operations.
 */
export type AmountOfGitCloneOperationsThatYarnWillRunAtTheSameTime = number;
/**
 * Possible values go from 0 ("no compression, faster") to 9 ("heavy compression, slower"). The default is 'mixed', which is a variant of 9 where files may be stored uncompressed if the builtin libzip heuristic thinks it will lead to a more sensible result.
 */
export type CompressionLevelEmployedForZipArchives = "mixed" | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
/**
 * This only matters for Prolog constraints, which are being deprecated. JavaScript constraints will always be read from the `yarn.config.cjs` file.
 */
export type PathOfTheConstraintsFile = string;
/**
 * This is an internal configuration setting that shouldn't be touched unless you really know what you're doing.
 */
export type DefaultLanguageModeThatShouldBeUsedWhenAPackageDoesnTOfferAnyInsight = string;
/**
 * This is an internal configuration setting that shouldn't be touched unless you really know what you're doing.
 */
export type DefaultProtocolThatShouldBeUsedWhenADependencyRangeIsAPureSemverRange = string;
/**
 * Possible values are `"^"` (the default), `"~"` or `""`.
 */
export type DefaultPrefixUsedInSemverRangesCreatedByYarnAddAndSimilarCommands = "^" | "~" | "";
export type FolderWhereTheVersioningFilesAreStored = string;
/**
 * The default is to check the terminal capabilities, but you can manually override it to either `true` or `false`.
 */
export type DefineWhetherColorsAreAllowedOnTheStandardOutput = boolean;
/**
 * If true (the default), Yarn will store the cache files into a folder located within `globalFolder` instead of respecting `cacheFolder`.
 */
export type DefineWhetherTheCacheShouldBeSharedBetweenAllLocalProjects = boolean;
/**
 * The default is to check the terminal capabilities, but you can manually override it to either `true` or `false`.
 */
export type DefineWhetherHyperlinksAreAllowedOnTheStandardOutput = boolean;
/**
 * If true, Yarn will refuse to change the cache in any way, whether it would add files or remove them, and will abort installs instead of letting that happen.
 */
export type DefineWhetherToAllowAddingRemovingFilesFromTheCacheOrNot = boolean;
/**
 * If true (the default on CI), Yarn will refuse to change the lockfile in any way, whether it would add new entries or remove them. Other files can be added to the checklist via the `immutablePatterns` setting.
 */
export type DefineWhetherToAllowAddingRemovingEntriesFromTheLockfileOrNot = boolean;
/**
 * If true (the default on CI environments), Yarn will print the build output directly within the terminal instead of buffering it in an external log file. Note that by default Yarn will attempt to use collapsible terminal sequences on supporting CI providers to make the output more legible.
 */
export type DefineWhetherToPrintTheBuildOutputDirectlyWithinTheTerminalOrNot = boolean;
/**
 * If true, Yarn will print any patch sections (hunks) that could not be applied successfully to the terminal.
 */
export type DefineWhetherToPrintPatchHunksDirectlyWithinTheTerminalOrNot = boolean;
/**
 * If true, Yarn will prefix most messages with codes suitable for search engines, with hyperlink support if your terminal allows it.
 */
export type DefineWhetherToPrependAMessageNameBeforeEachPrintedLineOrNot = boolean;
/**
 * If true (the default), Yarn will use the global folder as indirection between the network and the actual cache. This is only useful if `enableGlobalCache` is explicitly set to `false`, as otherwise the cache entries are persisted to the global cache no matter what.
 */
export type DefineWhetherToMirrorLocalCacheEntriesIntoTheGlobalCacheOrNot = boolean;
/**
 * If false, Yarn will never make any request to the network by itself, and will throw an exception rather than let it happen. It's a very useful setting for CI, which typically want to make sure they aren't loading their dependencies from the network by mistake.
 */
export type DefineWhetherRemoteNetworkRequestsAreAllowedOrNot = boolean;
/**
 * If true, Yarn will replace any network requests by reads from its local caches - even if they contain old information. This can be useful when performing local work on environments without network access (trains, planes, ...), as you can at least leverage the packages you installed on the same machine in the past.
 *
 * Since this setting will lead to stale data being used, it's recommended to set it for the current session as an environment variable (by running `export YARN_ENABLE_OFFLINE_MODE=1` in your terminal) rather than by adding it to your `.yarnrc.yml` file.
 */
export type DefineWhetherYarnShouldExclusivelyReadPackageMetadataFromItsCache = boolean;
/**
 * If true (the default outside of CI environments), Yarn will show progress bars for long-running events.
 */
export type DefineWhetherAnimatedProgressBarsShouldBeShownOrNot = boolean;
/**
 * If false, SSL certificate errors will be ignored
 */
export type DefineWhetherSSLErrorsShouldFailRequestsOrNot = boolean;
/**
 * If true (the default outside of CI environments), Yarn will periodically send anonymous data to our servers tracking some usage information such as the number of dependencies in your project, how many installs you ran, etc.
 *
 * Consult the [Telemetry](/advanced/telemetry) page for more details about this process.
 */
export type DefineWhetherAnonymousTelemetryDataShouldBeSentOrNot = boolean;
/**
 * If false, Yarn will not print the time spent running each sub-step when running various commands. This is only needed for testing purposes, when you want each execution to have exactly the same output as the previous ones.
 */
export type DefineWhetherToPrintTheTimeSpentRunningEachSubStepOrNot = boolean;
/**
 * If false, Yarn won't link workspaces just because their versions happen to match a semver range. Disabling this setting will require all workspaces to reference one another using the explicit `workspace:` protocol.
 *
 * This setting is usually only needed when your project needs to use the published version in order to build the new one (that's for example what happens with Babel, which depends on the latest stable release to build the future ones).
 */
export type DefineWhetherPureSemverRangesShouldAllowWorkspaceResolutionOrNot = boolean;
/**
 * Various files we be stored there: global cache, metadata cache, ...
 */
export type PathWhereAllFilesGlobalToTheSystemWillBeStored = string;
/**
 * Only HTTP proxies are supported at the moment.
 */
export type ProxyToUseWhenMakingAnHTTPRequest = string;
export type AmountOfTimeToWaitInSecondsBeforeRetryingAFailedHTTPRequest = number;
export type AmountOfTimeToWaitInMillisecondsBeforeCancellingPendingHTTPRequests = number;
export type PathToAFileContainingACertificateChainInPEMFormat = string;
export type PathToAFileContainingAPrivateKeyInPEMFormat = string;
/**
 * Only HTTP proxies are supported at the moment.
 */
export type DefineAProxyToUseWhenMakingAnHTTPSRequest = string;
/**
 * If true, whatever Yarn version is being executed will keep running rather than looking at the value of `yarnPath` to decide.
 */
export type DefineWhetherYarnPathShouldBeRespectedOrNot = boolean;
export type ArrayOfFilePatternsWhoseContentWonTBeAllowedToChangeIfEnableImmutableInstallsIsSet = string[];
export type ScopeUsedWhenCreatingPackagesViaTheInitCommand = string;
/**
 * The install state file contains a bunch of cached information about your project. It's only used for optimization purposes, and will be recreated if missing (you don't need to add it to Git).
 */
export type PathWhereTheInstallStateWillBePersisted = string;
export type MatchAllMessagesWithTheGivenCode = string;
/**
 * In case a message matches both `code`-based and `text`-based filters, the `text`-based ones will take precedence over the `code`-based ones.
 */
export type MatchMessagesWhoseContentIsStrictlyEqualToTheGivenText = string;
/**
 * In case a message matches both `pattern`-based and `code`-based filters, the `pattern`-based ones will take precedence over the other ones. Patterns can be overridden on a case-by-case basis by using the `text` filter, which has precedence over `pattern`.
 */
export type MatchMessagesWhoseContentMatchTheGivenGlobPattern = string;
export type NewLogLevelToApplyToTheMatchingMessagesUseDiscardIfYouWishToHideThoseMessagesAltogether =
  | "info"
  | "warning"
  | "error"
  | "discard";
/**
 * This can be used to hide specific messages, or instead make them more prominent. Rules defined there accept filtering messages by either name or raw content.
 */
export type AlterTheLogLevelsForEmittedMessages = {
  code?: MatchAllMessagesWithTheGivenCode;
  text?: MatchMessagesWhoseContentIsStrictlyEqualToTheGivenText;
  pattern?: MatchMessagesWhoseContentMatchTheGivenGlobPattern;
  level?: NewLogLevelToApplyToTheMatchingMessagesUseDiscardIfYouWishToHideThoseMessagesAltogether;
  [k: string]: unknown | undefined;
}[];
/**
 * We default to 50 concurrent requests, but it may be required to limit it even more when working behind proxies that can't handle large amounts of traffic.
 */
export type AmountOfHTTPRequestsThatAreAllowedToRunAtTheSameTime = number;
/**
 * Replacement of the former `nohoist` setting. Possible values are:
 *
 * - If `none` (the default), packages are hoisted as per the usual rules.
 * - If `workspaces`, packages won't be hoisted past the workspace that depends on them.
 * - If `dependencies`, transitive dependencies also won't be hoisted past your direct dependencies.
 *
 * This setting can be overridden on a per-workspace basis using the `installConfig.hoistingLimits` field.
 */
export type HighestPointWherePackagesCanBeHoisted = "workspaces" | "dependencies" | "none";
/**
 * If false, Yarn won't create self-referencing symlinks when using `nodeLinker: node-modules`. This setting can be overridden on a per-workspace basis using the `installConfig.selfReferences` field.
 */
export type DefineWhetherWorkspacesAreAllowedToRequireThemselves = boolean;
/**
 * Possible values are:
 *
 * - If `classic`, regular copy or clone operations are performed.
 * - If `hardlinks-global`, hardlinks to a global content-addressable store will be used.
 * - If `hardlinks-local`, hardlinks will only be created between similar packages from the same project.
 *
 * For compatibility with the ecosystem, the default is `classic`.
 */
export type DefineHowToCopyFilesToTheirTargetDestination = "classic" | "hardlinks-local" | "hardlinks-global";
/**
 * Yarn supports three ways to install your project's dependencies, based on the `nodeLinker` setting. Possible values are:
 *
 * - If `pnp`, a single Node.js loader file will be generated.
 * - If `pnpm`, a `node-modules` will be created using symlinks and hardlinks to a global content-addressable store.
 * - If `node-modules`, a regular `node_modules` folder just like in Yarn Classic or npm will be created.
 */
export type DefineHowNodePackagesShouldBeInstalled = DefineHowNodePackagesShouldBeInstalled1 &
  DefineHowNodePackagesShouldBeInstalled2;
export type DefineHowNodePackagesShouldBeInstalled1 = string | ("pnp" | "pnpm" | "node-modules");
export type DefineHowNodePackagesShouldBeInstalled2 = string;
/**
 * Possible values are:
 *
 * - If `junctions`, Yarn will use Windows junctions when linking workspaces into `node_modules` directories, which are always absolute paths.
 * - If `symlinks`, Yarn will use symlinks, which will use relative paths, and is consistent with Yarn's behavior on non-Windows platforms.
 *
 * Symlinks are preferred, but they require the Windows user running Yarn to have the `create symbolic links` privilege. As a result, we default to using junctions instead.
 */
export type DefineWhetherToUseJunctionsOrSymlinksWhenCreatingLinksOnWindows = "junctions" | "symlinks";
/**
 * If true, authentication credentials will always be sent when sending requests to the registries. This shouldn't be needed unless you configured the registry to reference a private npm mirror.
 */
export type DefineWhetherToAlwaysSendAuthenticationCredentialsWhenQueryingTheNpmRegistry = boolean;
/**
 * If not explicitly set, the value of `npmRegistryServer` will be used.
 */
export type DefineTheRegistryToUseWhenAuditingDependencies = string;
/**
 * Replacement of the former `_auth` setting. Because it requires storing unencrypted values in your configuration, `npmAuthToken` should be preferred when possible.
 */
export type DefineTheAuthenticationCredentialsToUseByDefaultWhenAccessingYourRegistries = string;
/**
 * Replacement of the former `_authToken` settings. If you're using `npmScopes` to define multiple registries, the `npmRegistries` dictionary allows you to override these credentials on a per-registry basis.
 */
export type DefineTheAuthenticationTokenToUseByDefaultWhenAccessingYourRegistries = string;
/**
 * Valid values are `public` and `restricted`, but `restricted` usually requires to register for a paid plan (this is up to the registry you use). Can be overridden on a per-package basis using the `publishConfig.access` field.
 */
export type DefineTheDefaultAccessToUseWhenPublishingPackagesToTheNpmRegistry = "public" | "restricted";
export type ArrayOfAdvisoryIDGlobPatternsOfPackagesToExcludeFromYarnNpmAudit = string[];
export type ArrayOfAdvisoryIDGlobPatternsToIgnoreFromYarnNpmAuditResults = string[];
/**
 * If not explicitly set, the value of `npmRegistryServer` will be used. Overridden by `publishConfig.registry`.
 */
export type DefineTheRegistryToUseWhenPushingPackages = string;
/**
 * Should you want to define different registries for different scopes, see `npmScopes`. To define the authentication scheme for your servers, see `npmAuthToken`. The url must use HTTPS by default, but this can be changed by adding it to the `unsafeHttpWhitelist`.
 */
export type DefineTheRegistryToUseWhenFetchingPackages = string;
/**
 * If not explicitly set, the value of `npmRegistryServer` will be used. Overridden by `publishConfig.registry`.
 */
export type DefineTheRegistryToUseWhenPushingPackages1 = string;
export type FolderWherePatchFilesWillBeWrittenTo = string;
/**
 * If true, Yarn will generate an experimental ESM loader (`.pnp.loader.mjs`) on top of the CJS one.
 */
export type DefineWhetherToGenerateANodeJsESMLoaderOrNot = boolean;
/**
 * If false, Yarn will generate an additional `.pnp.data.json` file.
 */
export type DefineWhetherToStoreThePnPDataInTheGeneratedFileOrNot = boolean;
/**
 * Possible values are:
 *
 * - If `all`, all packages can access dependencies made available in the fallback.
 * - If `dependencies-only` (the default), dependencies will have access to them but not your workspaces.
 * - If `none`, no packages will have access to them.
 */
export type DefineWhetherToAllowPackagesToRelyOnTheBuiltinPnPFallbackMechanism = "none" | "dependencies-only" | "all";
/**
 * Files matching those locations will not be covered by PnP and will use the regular Node.js resolution algorithm. Typically only needed if you have subprojects that aren't yet part of your workspace tree.
 */
export type ArrayOfFileGlobPatternsThatShouldBeForcedToUseTheDefaultCommonJSResolution = string[];
/**
 * Possible values are:
 *
 * - If `strict` (the default), modules won't be allowed to require packages they don't explicitly list in their own dependencies.
 * - If `loose`, packages will be allowed to access any other package that would have been hoisted to the top-level under 1.x installs.
 *
 * Note that, even in loose mode, hoisted require calls are unsafe and should be discouraged.
 */
export type DefineWhetherToAttemptToSimulateTraditionalNodeModulesHoisting = "strict" | "loose";
export type StringPrependedToTheGeneratedPnPLoader = string;
/**
 * While Yarn attempts to reference and load packages directly from their zip archives, it may not always be possible. In those cases, Yarn will extract the files to the unplugged folder.
 */
export type PathWhereUnpluggedPackagesAreStored = string;
/**
 * If true, deferred versioning by default when running the `yarn version` family of commands.
 */
export type DefineWhetherToUseDeferredVersioningByDefaultOrNot = boolean;
/**
 * If true, Yarn will ask for your guidance when some actions would be improved by being disambiguated. Enabling this setting also unlocks some features (for example the `yarn add` command will suggest to reuse the same dependencies as other workspaces if pertinent).
 */
export type DefineWhetherToUseInteractivePromptsByDefaultOrNot = boolean;
/**
 * If true, `yarn add` will attempt to reuse the most common dependency range in other workspaces.
 */
export type DefineWhetherToReuseMostCommonDependencyRangesOrNotWhenAddingDependenciesToAPackage = boolean;
/**
 * If true, Yarn will truncate lines that would go beyond the size of the terminal. If progress bars are disabled, lines will never be truncated.
 */
export type DefineWhetherToTruncateLinesThatWouldGoBeyondTheSizeOfTheTerminalOrNot = boolean;
export type StyleOfProgressBarToUse = "patrick" | "simba" | "jack" | "hogsfather" | "default";
export type ListOfOperatingSystemsToCover = string[];
/**
 * See https://nodejs.org/docs/latest/api/process.html#processarch for the architectures supported by Node.js
 */
export type ListOfCPUArchitecturesToCover = string[];
export type TheListOfStandardCLibrariesToCover = string[];
/**
 * We default to the platform parallelism, but for some CI, `os.cpus` may not report accurate values and may overwhelm their containers.
 */
export type MaximalAmountOfConcurrentHeavyTaskProcessing = MaximalAmountOfConcurrentHeavyTaskProcessing1 &
  MaximalAmountOfConcurrentHeavyTaskProcessing2;
export type MaximalAmountOfConcurrentHeavyTaskProcessing1 = number;
export type MaximalAmountOfConcurrentHeavyTaskProcessing2 = string;
/**
 * By default will use workers when performing heavy tasks, such as converting tgz files to zip. This setting can be used to disable workers and use a regular in-thread async processing.
 */
export type ExecutionStrategyForHeavyTasks = "async" | "workers";
/**
 * By default we only send one request per week, making it impossible for us to track your usage with a lower granularity.
 */
export type DefineTheMinimalAmountOfTimeBetweenTwoTelemetryEventsInDays = number;
/**
 * The default settings never assign unique IDs to anyone, so we have no way to know which data originates from which project. This setting can be used to force a user ID to be sent to our telemetry server.
 *
 * Frankly, it's only useful in some very specific use cases. For example, we use it on the Yarn repository in order to exclude our own usage from the public dashboards (since we run Yarn far more often here than anywhere else, the resulting data would be biased).
 */
export type UserDefinedUniqueIDToSendAlongWithTelemetryEvents = string;
/**
 * If true, Yarn will automatically add `@types` dependencies when running `yarn add` with packages that don't provide their own typings (as reported by the Algolia npm database). This behavior is enabled by default if you have a tsconfig file at the root of your project.
 */
export type DefineWhetherToAutomaticallyInstallTypesDependencies = boolean;
export type ArrayOfHostnameGlobPatternsForWhichUsingTheHTTPProtocolIsAllowed = string[];
/**
 * Due to a particularity in how Yarn installs packages which list peer dependencies, some packages will be mapped to multiple virtual directories that don't actually exist on the filesystem. This settings tells Yarn where to put them. Note that the folder name *must* be `__virtual__`.
 */
export type PathWhereVirtualPackagesWillBeStored = string;
/**
 * This binary will be executed instead of any other (including the global one) for any command run within the directory covered by the rc file. If the file extension ends with `.js` it will be required, and will be spawned in any other case.
 *
 * The `yarnPath` setting used to be the preferred way to install Yarn within a project, but we now recommend to use [Corepack](https://nodejs.org/api/corepack.html) in most cases.
 */
export type PathOfAYarnBinaryToUseInsteadOfTheGlobalOne = string;

/**
 * Yarnrc files (named this way because they must be called `.yarnrc.yml`) are the one place where you'll be able to configure Yarn's internal settings. While Yarn will automatically find them in the parent directories, they should usually be kept at the root of your project (often your repository). **Starting from the v2, they must be written in valid Yaml and have the right extension** (simply calling your file `.yarnrc` won't do).
 *
 * Environment variables can be accessed from setting definitions by using the `${NAME}` syntax when defining the values. By default Yarn will require the variables to be present, but this can be turned off by using either `${NAME-fallback}` (which will return `fallback` if `NAME` isn't set) or `${NAME:-fallback}` (which will return `fallback` if `NAME` isn't set, or is an empty string).
 *
 * Finally, note that most settings can also be defined through environment variables (at least for the simpler ones; arrays and objects aren't supported yet). To do this, just prefix the names and write them in snake case: `YARN_CACHE_FOLDER` will set the cache folder (such values will overwrite any that might have been defined in the RC files - use them sparingly).
 */
export interface Yarnrc {
  cacheFolder?: PathWhereTheDownloadedPackagesAreStoredOnYourSystem;
  cacheMigrationMode?: BehaviorThatYarnShouldFollowWhenItDetectsThatACacheEntryIsOutdated;
  httpsCaFilePath?: PathToAFileContainingOneOrMultipleCertificateAuthoritySigningCertificates;
  changesetBaseRefs?: ListOfGitRefsAgainstWhichYarnWillCompareYourBranchWhenItNeedsToDetectChanges;
  changesetIgnorePatterns?: ArrayOfFileGlobPatternsThatWillBeExcludedFromChangeDetection;
  checksumBehavior?: BehaviorThatYarnShouldFollowWhenItDetectsThatACacheEntryHasADifferentChecksumThanExpected;
  cloneConcurrency?: AmountOfGitCloneOperationsThatYarnWillRunAtTheSameTime;
  compressionLevel?: CompressionLevelEmployedForZipArchives;
  constraintsPath?: PathOfTheConstraintsFile;
  defaultLanguageName?: DefaultLanguageModeThatShouldBeUsedWhenAPackageDoesnTOfferAnyInsight;
  defaultProtocol?: DefaultProtocolThatShouldBeUsedWhenADependencyRangeIsAPureSemverRange;
  defaultSemverRangePrefix?: DefaultPrefixUsedInSemverRangesCreatedByYarnAddAndSimilarCommands;
  deferredVersionFolder?: FolderWhereTheVersioningFilesAreStored;
  enableColors?: DefineWhetherColorsAreAllowedOnTheStandardOutput;
  enableGlobalCache?: DefineWhetherTheCacheShouldBeSharedBetweenAllLocalProjects;
  enableHyperlinks?: DefineWhetherHyperlinksAreAllowedOnTheStandardOutput;
  enableImmutableCache?: DefineWhetherToAllowAddingRemovingFilesFromTheCacheOrNot;
  enableImmutableInstalls?: DefineWhetherToAllowAddingRemovingEntriesFromTheLockfileOrNot;
  enableInlineBuilds?: DefineWhetherToPrintTheBuildOutputDirectlyWithinTheTerminalOrNot;
  enableInlineHunks?: DefineWhetherToPrintPatchHunksDirectlyWithinTheTerminalOrNot;
  enableMessageNames?: DefineWhetherToPrependAMessageNameBeforeEachPrintedLineOrNot;
  enableMirror?: DefineWhetherToMirrorLocalCacheEntriesIntoTheGlobalCacheOrNot;
  enableNetwork?: DefineWhetherRemoteNetworkRequestsAreAllowedOrNot;
  enableOfflineMode?: DefineWhetherYarnShouldExclusivelyReadPackageMetadataFromItsCache;
  enableProgressBars?: DefineWhetherAnimatedProgressBarsShouldBeShownOrNot;
  /**
   * If false, Yarn will not execute the `postinstall` scripts from third-party packages when installing the project (workspaces will still see their postinstall scripts evaluated, as they're assumed to be safe if you're running an install within them).
   *
   * Note that you also have the ability to disable scripts on a per-package basis using `dependenciesMeta`, or to re-enable a specific script by combining `enableScripts` and `dependenciesMeta`.
   */
  enableScripts?: boolean;
  enableStrictSsl?: DefineWhetherSSLErrorsShouldFailRequestsOrNot;
  enableTelemetry?: DefineWhetherAnonymousTelemetryDataShouldBeSentOrNot;
  enableTimers?: DefineWhetherToPrintTheTimeSpentRunningEachSubStepOrNot;
  enableTransparentWorkspaces?: DefineWhetherPureSemverRangesShouldAllowWorkspaceResolutionOrNot;
  globalFolder?: PathWhereAllFilesGlobalToTheSystemWillBeStored;
  httpProxy?: ProxyToUseWhenMakingAnHTTPRequest;
  httpRetry?: AmountOfTimeToWaitInSecondsBeforeRetryingAFailedHTTPRequest;
  httpTimeout?: AmountOfTimeToWaitInMillisecondsBeforeCancellingPendingHTTPRequests;
  httpsCertFilePath?: PathToAFileContainingACertificateChainInPEMFormat;
  httpsKeyFilePath?: PathToAFileContainingAPrivateKeyInPEMFormat;
  httpsProxy?: DefineAProxyToUseWhenMakingAnHTTPSRequest;
  ignorePath?: DefineWhetherYarnPathShouldBeRespectedOrNot;
  immutablePatterns?: ArrayOfFilePatternsWhoseContentWonTBeAllowedToChangeIfEnableImmutableInstallsIsSet;
  initScope?: ScopeUsedWhenCreatingPackagesViaTheInitCommand;
  initFields?: AdditionalFieldsToSetWhenCreatingPackagesViaTheInitCommand;
  installStatePath?: PathWhereTheInstallStateWillBePersisted;
  logFilters?: AlterTheLogLevelsForEmittedMessages;
  networkConcurrency?: AmountOfHTTPRequestsThatAreAllowedToRunAtTheSameTime;
  networkSettings?: AdditionalNetworkSettingsPerHostname;
  nmHoistingLimits?: HighestPointWherePackagesCanBeHoisted;
  nmSelfReferences?: DefineWhetherWorkspacesAreAllowedToRequireThemselves;
  nmMode?: DefineHowToCopyFilesToTheirTargetDestination;
  nodeLinker?: DefineHowNodePackagesShouldBeInstalled;
  winLinkType?: DefineWhetherToUseJunctionsOrSymlinksWhenCreatingLinksOnWindows;
  npmAlwaysAuth?: DefineWhetherToAlwaysSendAuthenticationCredentialsWhenQueryingTheNpmRegistry;
  npmAuditRegistry?: DefineTheRegistryToUseWhenAuditingDependencies;
  npmAuthIdent?: DefineTheAuthenticationCredentialsToUseByDefaultWhenAccessingYourRegistries;
  npmAuthToken?: DefineTheAuthenticationTokenToUseByDefaultWhenAccessingYourRegistries;
  npmPublishAccess?: DefineTheDefaultAccessToUseWhenPublishingPackagesToTheNpmRegistry;
  npmAuditExcludePackages?: ArrayOfAdvisoryIDGlobPatternsOfPackagesToExcludeFromYarnNpmAudit;
  npmAuditIgnoreAdvisories?: ArrayOfAdvisoryIDGlobPatternsToIgnoreFromYarnNpmAuditResults;
  npmPublishRegistry?: DefineTheRegistryToUseWhenPushingPackages;
  npmRegistries?: PerRegistryConfigurations;
  npmRegistryServer?: DefineTheRegistryToUseWhenFetchingPackages;
  npmScopes?: PerScopeRegistryConfigurations;
  packageExtensions?: ExtendThePackageDefinitionsOfYourDependenciesUsefulToFixThirdPartyIssues;
  patchFolder?: FolderWherePatchFilesWillBeWrittenTo;
  pnpEnableEsmLoader?: DefineWhetherToGenerateANodeJsESMLoaderOrNot;
  pnpEnableInlining?: DefineWhetherToStoreThePnPDataInTheGeneratedFileOrNot;
  pnpFallbackMode?: DefineWhetherToAllowPackagesToRelyOnTheBuiltinPnPFallbackMechanism;
  pnpIgnorePatterns?: ArrayOfFileGlobPatternsThatShouldBeForcedToUseTheDefaultCommonJSResolution;
  pnpMode?: DefineWhetherToAttemptToSimulateTraditionalNodeModulesHoisting;
  pnpShebang?: StringPrependedToTheGeneratedPnPLoader;
  pnpUnpluggedFolder?: PathWhereUnpluggedPackagesAreStored;
  preferDeferredVersions?: DefineWhetherToUseDeferredVersioningByDefaultOrNot;
  preferInteractive?: DefineWhetherToUseInteractivePromptsByDefaultOrNot;
  preferReuse?: DefineWhetherToReuseMostCommonDependencyRangesOrNotWhenAddingDependenciesToAPackage;
  preferTruncatedLines?: DefineWhetherToTruncateLinesThatWouldGoBeyondTheSizeOfTheTerminalOrNot;
  progressBarStyle?: StyleOfProgressBarToUse;
  supportedArchitectures?: SystemsForWhichYarnShouldInstallPackages;
  taskPoolConcurrency?: MaximalAmountOfConcurrentHeavyTaskProcessing;
  workerPoolMode?: ExecutionStrategyForHeavyTasks;
  telemetryInterval?: DefineTheMinimalAmountOfTimeBetweenTwoTelemetryEventsInDays;
  telemetryUserId?: UserDefinedUniqueIDToSendAlongWithTelemetryEvents;
  tsEnableAutoTypes?: DefineWhetherToAutomaticallyInstallTypesDependencies;
  unsafeHttpWhitelist?: ArrayOfHostnameGlobPatternsForWhichUsingTheHTTPProtocolIsAllowed;
  virtualFolder?: PathWhereVirtualPackagesWillBeStored;
  yarnPath?: PathOfAYarnBinaryToUseInsteadOfTheGlobalOne;
  [k: string]: unknown | undefined;
}
export interface AdditionalFieldsToSetWhenCreatingPackagesViaTheInitCommand {
  /**
   * All properties will be added verbatim to the generated package.json.
   *
   * This interface was referenced by `AdditionalFieldsToSetWhenCreatingPackagesViaTheInitCommand`'s JSON-Schema definition
   * via the `patternProperty` "^(.+)$".
   */
  [k: string]: (string | number | boolean) | undefined;
}
export interface AdditionalNetworkSettingsPerHostname {
  /**
   * This interface was referenced by `AdditionalNetworkSettingsPerHostname`'s JSON-Schema definition
   * via the `patternProperty` "^(.+)$".
   */
  [k: string]: {
    httpsCaFilePath?: PathToAFileContainingOneOrMultipleCertificateAuthoritySigningCertificates;
    enableNetwork?: DefineWhetherRemoteNetworkRequestsAreAllowedOrNot;
    httpProxy?: ProxyToUseWhenMakingAnHTTPRequest;
    httpsCertFilePath?: PathToAFileContainingACertificateChainInPEMFormat;
    httpsKeyFilePath?: PathToAFileContainingAPrivateKeyInPEMFormat;
    httpsProxy?: DefineAProxyToUseWhenMakingAnHTTPSRequest;
    [k: string]: unknown | undefined;
  };
}
export interface PerRegistryConfigurations {
  /**
   * This interface was referenced by `PerRegistryConfigurations`'s JSON-Schema definition
   * via the `patternProperty` "^(?:^[a-zA-Z][a-zA-Z0-9+-.]*:)?[^\s]*$".
   */
  [k: string]: {
    npmAlwaysAuth?: DefineWhetherToAlwaysSendAuthenticationCredentialsWhenQueryingTheNpmRegistry;
    npmAuthIdent?: DefineTheAuthenticationCredentialsToUseByDefaultWhenAccessingYourRegistries;
    npmAuthToken?: DefineTheAuthenticationTokenToUseByDefaultWhenAccessingYourRegistries;
    [k: string]: unknown | undefined;
  };
}
export interface PerScopeRegistryConfigurations {
  /**
   * This interface was referenced by `PerScopeRegistryConfigurations`'s JSON-Schema definition
   * via the `patternProperty` "^\S+$".
   */
  [k: string]: {
    npmPublishRegistry?: DefineTheRegistryToUseWhenPushingPackages1;
    npmRegistryServer?: DefineTheRegistryToUseWhenFetchingPackages;
    npmAlwaysAuth?: DefineWhetherToAlwaysSendAuthenticationCredentialsWhenQueryingTheNpmRegistry;
    npmAuthIdent?: DefineTheAuthenticationCredentialsToUseByDefaultWhenAccessingYourRegistries;
    npmAuthToken?: DefineTheAuthenticationTokenToUseByDefaultWhenAccessingYourRegistries;
    [k: string]: unknown | undefined;
  };
}
/**
 * Some packages may have been specified incorrectly with regard to their dependencies - for example with one dependency being missing, causing Yarn to refuse it the access. The `packageExtensions` fields offer a way to extend the existing package definitions with additional information. If you use it, consider sending a PR upstream and contributing your extension to the [`plugin-compat` database](https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-extensions/sources/index.ts).
 *
 * Note: This field is made to add dependencies; if you need to rewrite existing ones, prefer the `resolutions` field instead.
 */
export interface ExtendThePackageDefinitionsOfYourDependenciesUsefulToFixThirdPartyIssues {
  /**
   * Each key is a descriptor covering a semver range. The extensions will be applied to any package whose version matches the specified range. This is true regardless of where the package comes from, so no distinction on whether they come from git or a registry, for example. Only the version matters.
   *
   * This interface was referenced by `ExtendThePackageDefinitionsOfYourDependenciesUsefulToFixThirdPartyIssues`'s JSON-Schema definition
   * via the `patternProperty` "^(?:@([^/]+?)/)?([^/]+?)(?:@(.+))$".
   */
  [k: string]: {
    dependencies?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^(?:@([^/]+?)/)?([^/]+?)$".
       */
      [k: string]: (string) | undefined;
    };
    peerDependencies?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^(?:@([^/]+?)/)?([^/]+?)$".
       */
      [k: string]: (string) | undefined;
    };
    peerDependenciesMeta?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^(?:@([^/]+?)/)?([^/]+?)$".
       */
      [k: string]: {
        optional?: boolean;
        [k: string]: unknown | undefined;
      };
    };
    [k: string]: unknown | undefined;
  };
}
export interface SystemsForWhichYarnShouldInstallPackages {
  os?: ListOfOperatingSystemsToCover;
  cpu?: ListOfCPUArchitecturesToCover;
  libc?: TheListOfStandardCLibrariesToCover;
  [k: string]: unknown | undefined;
}

export type { Yarnrc as default };
