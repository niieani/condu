/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Ignore changes in files matched by glob(s) when detecting changed packages. Relevant for `lerna changed`, `lerna publish`, `lerna version`, and `lerna diff`.
 */
export type IgnoreChanges = string[];
/**
 * During `lerna create`, specifies the list of keywords of the new package.
 */
export type Keywords = string[];
/**
 * During `lerna publish`, include specified private packages when publishing by temporarily removing the private property from the package manifest. This should only be used for testing private packages that will become public. The value "*" will include all private packages.
 */
export type IncludePrivate = string[];
export type Assets = (
  | string
  | {
      /**
       * A specific file or glob pattern that matches files in the source directory
       */
      from: string;
      /**
       * The path to copy the file to within the publish directory
       */
      to: string;
      [k: string]: unknown | undefined;
    }
)[];
/**
 * An object that describes a commit type's settings in the CHANGELOG
 */
export type Type = {
  /**
   * A string used to match <type>s used in the Conventional Commits convention.
   */
  type: string;
  /**
   * A string used to match `[optional scope]` used in the Conventional Commits convention.
   */
  scope?: string;
  /**
   * The section where the matched commit type will display in the CHANGELOG.
   */
  section?: string;
  /**
   * Set to `true` to hide matched commit types in the CHANGELOG.
   */
  hidden?: boolean;
  [k: string]: unknown | undefined;
} & (
  | {
      [k: string]: unknown | undefined;
    }
  | {
      [k: string]: unknown | undefined;
    }
);
/**
 * Arguments to pass to the npm client when running commands.
 */
export type NpmClientArgs = string[];

export interface Lerna {
  /**
   * The JSON schema version used to validate this configuration file
   */
  $schema?: string;
  /**
   * The version of the repository, or "independent" for a repository with independently versioned packages.
   */
  version?: string;
  /**
   * An array of globs where packages can be located.
   */
  packages?: string[];
  /**
   * By setting `useNx` to `false` you can use the legacy task running implementations in `lerna` (`p-map` and `p-queue`) instead of using the default modern task runner implementation powered by [Nx](https://nx.dev).
   */
  useNx?: boolean;
  /**
   * Options for individual Lerna commands.
   */
  command?: {
    /**
     * Options for the `add` command.
     */
    add?: {
      /**
       * During `lerna add`, save the newly added package to devDependencies instead of dependencies.
       */
      dev?: boolean;
      /**
       * During `lerna add`, save the exact version of the newly added package. During `lerna version`, specify cross-dependency version numbers exactly rather than with a caret (^).
       */
      exact?: boolean;
      /**
       * During `lerna add`, save the newly added package to peerDependencies instead of dependencies.
       */
      peer?: boolean;
      /**
       * The npm registry to use for all npm client operations. During `lerna create`, specifies the new package's publishConfig.registry.
       */
      registry?: string;
      /**
       * Automatically chain `lerna bootstrap` after `lerna add`.
       */
      bootstrap?: boolean;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `bootstrap` command.
     */
    bootstrap?: {
      /**
       * During `lerna bootstrap`, install external dependencies matching [glob] to the repo root.
       */
      hoist?: string;
      mutex?: unknown;
      /**
       * During `lerna publish` and `lerna bootstrap`, when true, disable deprecated 'prepublish' lifecycle script.
       */
      ignorePrepublish?: boolean;
      /**
       * During `lerna bootstrap`, `lerna publish`, and `lerna version`, don't run ANY lifecycle scripts in bootstrapped packages.
       */
      ignoreScripts?: boolean;
      /**
       * The npm registry to use for all npm client operations. During `lerna create`, specifies the new package's publishConfig.registry.
       */
      registry?: string;
      /**
       * During `lerna bootstrap`, don't allow warnings when hoisting as it causes longer bootstrap times and other issues.
       */
      strict?: boolean;
      /**
       * During `lerna bootstrap` and `lerna link`, when true, force local sibling links regardless of version range match.
       */
      forceLocal?: boolean;
      /**
       * For `lerna bootstrap`, `lerna link`, and `lerna publish`, the subdirectory to use as the source of any links. Must apply to ALL packages.
       */
      contents?: string;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `changed` command.
     */
    changed?: {
      /**
       * During `lerna version`, `lerna changed`, and `lerna publish`, when true, use conventional commits specification to determine the version bump and generate CHANGELOG.md files.
       */
      conventionalCommits?: boolean;
      /**
       * Detect currently prereleased packages that would change to a non-prerelease version. Relevant for `lerna changed` and `lerna version`.
       */
      conventionalGraduate?: string | boolean | string[];
      /**
       * During `lerna changed` and `lerna version`, always include targeted packages when detecting changed packages, skipping default logic.
       */
      forcePublish?: string | boolean | string[];
      ignoreChanges?: IgnoreChanges;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `clean` command.
     */
    clean?: {
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `create` command.
     */
    create?: {
      /**
       * During `lerna create` and when using a scope, set publishConfig.access value.
       */
      access?: "public" | "restricted";
      /**
       * During `lerna create`, specifies that the new package has an executable with the given name.
       */
      bin?: string;
      /**
       * During `lerna create`, specifies the description of the new package.
       */
      description?: string;
      /**
       * During `lerna create`, specifies the list of dependencies of the new package.
       */
      dependencies?: string[];
      /**
       * During `lerna create`, when true, initializes a transpiled ES Module.
       */
      esModule?: boolean;
      /**
       * During `lerna create`, specifies the homepage of the new package. Defaults to a subpath of the root pkg.homepage.
       */
      homepage?: string;
      keywords?: Keywords;
      /**
       * During `lerna create`, specifies the license of the new package (SPDX identifier). Defaults to ISC.
       */
      license?: string;
      /**
       * The npm registry to use for all npm client operations. During `lerna create`, specifies the new package's publishConfig.registry.
       */
      registry?: string;
      /**
       * During `lerna create`, specifies the publishConfig.tag for the new package.
       */
      tag?: string;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `diff` command.
     */
    diff?: {
      ignoreChanges?: IgnoreChanges;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `exec` command.
     */
    exec?: {
      /**
       * During `lerna exec` and `lerna run`, stream output with lines prefixed by originating package name.
       */
      stream?: boolean;
      /**
       * During `lerna exec` and `lerna run`, run commands with unlimited concurrency, streaming prefixed output.
       */
      parallel?: boolean;
      /**
       * During `lerna exec` and `lerna run`, exit with non-zero status if any command fails.
       */
      bail?: boolean;
      /**
       * During `lerna exec` and `lerna run`, prefix output with originating package name.
       */
      prefix?: boolean;
      /**
       * During `lerna exec` and `lerna run`, profile command execution and output performance profile to default location.
       */
      profile?: boolean;
      /**
       * During `lerna exec` and `lerna run`, profile command execution and output performance profile to the specified location instead of default project root.
       */
      profileLocation?: string;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `import` command.
     */
    import?: {
      /**
       * During `lerna import`, when true, import each merge commit as a single change the merge introduced.
       */
      flatten?: boolean;
      /**
       * During `lerna import`, specifies the directory for the external git repository.
       */
      dest?: string;
      /**
       * During `lerna import`, when true, preserve the original committer in additional to original author.
       */
      preserveCommit?: boolean;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `link` command.
     */
    link?: {
      /**
       * During `lerna bootstrap` and `lerna link`, when true, force local sibling links regardless of version range match.
       */
      forceLocal?: boolean;
      /**
       * For `lerna bootstrap`, `lerna link`, and `lerna publish`, the subdirectory to use as the source of any links. Must apply to ALL packages.
       */
      contents?: string;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `list` command.
     */
    list?: {
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `publish` command.
     */
    publish?: {
      /**
       * During `lerna publish`, when true, publish packages after every successful merge using the sha as part of the tag.
       */
      canary?: boolean;
      /**
       * For `lerna publish` and `lerna version`, the prerelease identifier when versioning a prerelease.
       */
      preid?: string;
      /**
       * For `lerna bootstrap`, `lerna link`, and `lerna publish`, the subdirectory to use as the source of any links. Must apply to ALL packages.
       */
      contents?: string;
      /**
       * During `lerna publish`, publish packages with the specified npm dist-tag.
       */
      distTag?: string;
      /**
       * For `lerna publish`, the Legacy Base64 Encoded username and password to use.
       */
      legacyAuth?: string;
      /**
       * During `lerna publish`, publish prerelease packages with the specified npm dist-tag.
       */
      preDistTag?: string;
      /**
       * For `lerna publish`, the explicit SHA to set as gitHead when packing tarballs, only allowed with 'from-package' positional.
       */
      gitHead?: string;
      /**
       * During `lerna publish` and `lerna bootstrap`, when true, disable deprecated 'prepublish' lifecycle script.
       */
      ignorePrepublish?: boolean;
      /**
       * During `lerna bootstrap`, `lerna publish`, and `lerna version`, don't run ANY lifecycle scripts in bootstrapped packages.
       */
      ignoreScripts?: boolean;
      /**
       * During `lerna publish` and `lerna version`, when true, reset changes file-by-file, not globally.
       */
      granularPathspec?: boolean;
      /**
       * During `lerna publish`, supply a one-time password for publishing with two-factor authentication.
       */
      otp?: string;
      /**
       * The npm registry to use for all npm client operations. During `lerna create`, specifies the new package's publishConfig.registry.
       */
      registry?: string;
      /**
       * During `lerna publish`, when true, execute ./scripts/prepublish.js and ./scripts/postpublish.js, relative to package root.
       */
      requireScripts?: boolean;
      /**
       * During `lerna publish`, when true, reset changes to working tree after publishing is complete.
       */
      gitReset?: boolean;
      /**
       * During `lerna publish`, when true, create a temporary tag while publishing.
       */
      tempTag?: boolean;
      /**
       * During `lerna publish`, when true, verify package read-write access for current npm user.
       */
      verifyAccess?: boolean;
      includePrivate?: IncludePrivate;
      /**
       * Custom directory to use for the package contents. This can contain dynamic placeholders like `{workspaceRoot}`, `{projectRoot}` and `{projectName}`. See https://lerna.js.org/docs/concepts#configuring-published-files
       */
      directory?: string;
      assets?: Assets;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      /**
       * Generate a json summary report after all packages have been successfully published, you can pass an optional path for where to save the file.
       */
      summaryFile?: string;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `run` command.
     */
    run?: {
      /**
       * During `lerna exec` and `lerna run`, stream output with lines prefixed by originating package name.
       */
      stream?: boolean;
      /**
       * During `lerna exec` and `lerna run`, run commands with unlimited concurrency, streaming prefixed output.
       */
      parallel?: boolean;
      /**
       * During `lerna exec` and `lerna run`, exit with non-zero status if any command fails.
       */
      bail?: boolean;
      /**
       * During `lerna exec` and `lerna run`, prefix output with originating package name.
       */
      prefix?: boolean;
      /**
       * During `lerna exec` and `lerna run`, profile command execution and output performance profile to default location.
       */
      profile?: boolean;
      /**
       * During `lerna exec` and `lerna run`, profile command execution and output performance profile to the specified location instead of default project root.
       */
      profileLocation?: string;
      /**
       * When true, escalates loglevel to 'verbose' and shows nx verbose output if useNx is true.
       */
      verbose?: boolean;
      /**
       * During `lerna run`, when true, skip the nx cache.
       */
      skipNxCache?: boolean;
      /**
       * During `lerna run`, when false, skip loading of environment variables from .env files.
       */
      loadEnvFiles?: boolean;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `version` command.
     */
    version?: {
      /**
       * For `lerna version`, the branches to allow versioning from.
       */
      allowBranch?: string | string[];
      /**
       * During `lerna version`, when true, amend the existing commit instead of generating a new one.
       */
      amend?: boolean;
      buildMetadata?: string;
      /**
       * During `lerna version`, `lerna changed`, and `lerna publish`, when true, use conventional commits specification to determine the version bump and generate CHANGELOG.md files.
       */
      conventionalCommits?: boolean;
      /**
       * Detect currently prereleased packages that would change to a non-prerelease version. Relevant for `lerna changed` and `lerna version`.
       */
      conventionalGraduate?: string | boolean | string[];
      /**
       * During `lerna version`, version changed packages as prereleases when using --conventional-commits.
       */
      conventionalPrerelease?: string | boolean | string[];
      /**
       * During `lerna version`, bumps version of changed prereleased packages when using --conventional-commits.
       */
      conventionalBumpPrerelease?: boolean;
      /**
       * For `lerna version`, the custom conventional-changelog preset.
       */
      changelogPreset?: string | ConventionalChangelogConfiguration;
      /**
       * Additional markdown to add to CHANGELOG.md entries.
       */
      changelogEntryAdditionalMarkdown?: string;
      /**
       * During `lerna add`, save the exact version of the newly added package. During `lerna version`, specify cross-dependency version numbers exactly rather than with a caret (^).
       */
      exact?: boolean;
      /**
       * During `lerna changed` and `lerna version`, always include targeted packages when detecting changed packages, skipping default logic.
       */
      forcePublish?: string | boolean | string[];
      /**
       * During `lerna version`, push git changes to the specified remote.
       */
      gitRemote?: string;
      /**
       * During `lerna version`, an official GitHub or GitLab release for every version.
       */
      createRelease?: "github" | "gitlab";
      ignoreChanges?: IgnoreChanges;
      /**
       * During `lerna bootstrap`, `lerna publish`, and `lerna version`, don't run ANY lifecycle scripts in bootstrapped packages.
       */
      ignoreScripts?: boolean;
      /**
       * For `lerna version`, the custom commit message to use when creating the version commit.
       */
      message?: string;
      /**
       * During `lerna version`, when true, generate CHANGELOG.md files when using --conventional-commits.
       */
      changelog?: boolean;
      /**
       * During `lerna version`, when true, run git commit hooks when committing version changes.
       */
      commitHooks?: boolean;
      /**
       * During `lerna version`, when true, commit and tag version changes.
       */
      gitTagVersion?: boolean;
      /**
       * During `lerna version`, when true, runs lifecycle scripts when syncing the lock file after the version bump.
       */
      runScriptsOnLockfileUpdate?: boolean;
      /**
       * During `lerna version`, when true, updates the version of the contents directory.
       */
      syncDistVersion?: boolean;
      /**
       * During `lerna publish` and `lerna version`, when true, reset changes file-by-file, not globally.
       */
      granularPathspec?: boolean;
      /**
       * During `lerna version`, when true, push tagged commit to git remote.
       */
      push?: boolean;
      /**
       * For `lerna publish` and `lerna version`, the prerelease identifier when versioning a prerelease.
       */
      preid?: string;
      /**
       * During `lerna version`, when true, pass the `--gpg-sign` flag to `git commit`.
       */
      signGitCommit?: boolean;
      /**
       * During `lerna version`, when true, pass the `--sign` flag to `git tag`.
       */
      signGitTag?: boolean;
      /**
       * During `lerna version`, when true, pass the `--force` flag to `git tag`.
       */
      forceGitTag?: boolean;
      /**
       * During `lerna version`, customize the tag prefix. To remove entirely, pass an empty string.
       */
      tagVersionPrefix?: string;
      /**
       * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
       */
      npmClient?: "npm" | "yarn" | "pnpm";
      npmClientArgs?: NpmClientArgs;
      /**
       * The level of logging to use when running commands. Defaults to info if unspecified.
       */
      loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
      /**
       * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
       */
      concurrency?: number;
      /**
       * When true, Lerna will fail if a cycle is detected among dependencies.
       */
      rejectCycles?: boolean;
      /**
       * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
       */
      progress?: boolean;
      /**
       * When true, Lerna will sort the packages topologically (dependencies before dependents).
       */
      sort?: boolean;
      /**
       * The maximum number of bytes to allow a child process for subcommand execution.
       */
      maxBuffer?: number;
      /**
       * When true, Lerna will automatically answer yes to all confirmation prompts.
       */
      yes?: boolean;
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      /**
       * Include tags from merged branches when running a command with --since.
       */
      includeMergedTags?: boolean;
      /**
       * Don't fail if no package is matched.
       */
      continueIfNoMatch?: boolean;
      [k: string]: unknown | undefined;
    };
    /**
     * Options for the `watch` command.
     */
    watch?: {
      /**
       * Include only packages with names matching the given glob
       */
      scope?: string;
      /**
       * Exclude packages with names matching the given glob
       */
      ignore?: string;
      /**
       * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
       */
      private?: boolean;
      /**
       * Only include packages that have been changed since the specified [ref].
       */
      since?: string;
      /**
       * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
       */
      excludeDependents?: boolean;
      /**
       * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependents?: boolean;
      /**
       * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
       */
      includeDependencies?: boolean;
      [k: string]: unknown | undefined;
    };
  };
  /**
   * The npm client to use when running commands (either npm, yarn, or pnpm). Defaults to npm if unspecified.
   */
  npmClient?: "npm" | "yarn" | "pnpm";
  npmClientArgs?: NpmClientArgs;
  /**
   * The level of logging to use when running commands. Defaults to info if unspecified.
   */
  loglevel?: "error" | "warn" | "info" | "verbose" | "debug" | "silly";
  /**
   * The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified.
   */
  concurrency?: number;
  /**
   * When true, Lerna will fail if a cycle is detected among dependencies.
   */
  rejectCycles?: boolean;
  /**
   * When true, Lerna will display progress bars when running commands. Progress bars are always off in CI.
   */
  progress?: boolean;
  /**
   * When true, Lerna will sort the packages topologically (dependencies before dependents).
   */
  sort?: boolean;
  /**
   * The maximum number of bytes to allow a child process for subcommand execution.
   */
  maxBuffer?: number;
  /**
   * When true, Lerna will automatically answer yes to all confirmation prompts.
   */
  yes?: boolean;
  /**
   * Include only packages with names matching the given glob
   */
  scope?: string;
  /**
   * Exclude packages with names matching the given glob
   */
  ignore?: string;
  /**
   * Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry).
   */
  private?: boolean;
  /**
   * Only include packages that have been changed since the specified [ref].
   */
  since?: string;
  /**
   * Exclude all transitive dependents when running a command with --since, overriding the default "changed" algorithm.
   */
  excludeDependents?: boolean;
  /**
   * Include all transitive dependents when running a command regardless of --scope, --ignore, or --since.
   */
  includeDependents?: boolean;
  /**
   * Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since.
   */
  includeDependencies?: boolean;
  /**
   * Include tags from merged branches when running a command with --since.
   */
  includeMergedTags?: boolean;
  /**
   * Don't fail if no package is matched.
   */
  continueIfNoMatch?: boolean;
  /**
   * During `lerna add`, save the newly added package to devDependencies instead of dependencies.
   */
  dev?: boolean;
  /**
   * During `lerna add`, save the newly added package to peerDependencies instead of dependencies.
   */
  peer?: boolean;
  /**
   * Automatically chain `lerna bootstrap` after `lerna add`.
   */
  bootstrap?: boolean;
  /**
   * During `lerna bootstrap`, install external dependencies matching [glob] to the repo root.
   */
  hoist?: string;
  mutex?: unknown;
  /**
   * During `lerna bootstrap`, don't allow warnings when hoisting as it causes longer bootstrap times and other issues.
   */
  strict?: boolean;
  /**
   * During `lerna create` and when using a scope, set publishConfig.access value.
   */
  access?: "public" | "restricted";
  /**
   * During `lerna create`, specifies that the new package has an executable with the given name.
   */
  bin?: string;
  /**
   * During `lerna create`, specifies the description of the new package.
   */
  description?: string;
  /**
   * During `lerna create`, specifies the list of dependencies of the new package.
   */
  dependencies?: string[];
  /**
   * During `lerna create`, when true, initializes a transpiled ES Module.
   */
  esModule?: boolean;
  /**
   * During `lerna create`, specifies the homepage of the new package. Defaults to a subpath of the root pkg.homepage.
   */
  homepage?: string;
  keywords?: Keywords;
  /**
   * During `lerna create`, specifies the license of the new package (SPDX identifier). Defaults to ISC.
   */
  license?: string;
  /**
   * During `lerna create`, specifies the publishConfig.tag for the new package.
   */
  tag?: string;
  /**
   * During `lerna import`, when true, import each merge commit as a single change the merge introduced.
   */
  flatten?: boolean;
  /**
   * During `lerna import`, specifies the directory for the external git repository.
   */
  dest?: string;
  /**
   * During `lerna import`, when true, preserve the original committer in additional to original author.
   */
  preserveCommit?: boolean;
  /**
   * During `lerna publish`, when true, publish packages after every successful merge using the sha as part of the tag.
   */
  canary?: boolean;
  /**
   * During `lerna publish`, publish packages with the specified npm dist-tag.
   */
  distTag?: string;
  /**
   * During `lerna publish`, publish prerelease packages with the specified npm dist-tag.
   */
  preDistTag?: string;
  /**
   * For `lerna publish`, the Legacy Base64 Encoded username and password to use.
   */
  legacyAuth?: string;
  /**
   * For `lerna publish`, the explicit SHA to set as gitHead when packing tarballs, only allowed with 'from-package' positional.
   */
  gitHead?: string;
  /**
   * During `lerna publish`, supply a one-time password for publishing with two-factor authentication.
   */
  otp?: string;
  /**
   * During `lerna publish`, when true, execute ./scripts/prepublish.js and ./scripts/postpublish.js, relative to package root.
   */
  requireScripts?: boolean;
  /**
   * During `lerna publish`, when true, reset changes to working tree after publishing is complete.
   */
  gitReset?: boolean;
  /**
   * During `lerna publish`, when true, create a temporary tag while publishing.
   */
  tempTag?: boolean;
  /**
   * During `lerna publish`, when true, verify package read-write access for current npm user.
   */
  verifyAccess?: boolean;
  /**
   * During `lerna run`, when true, skip the nx cache.
   */
  skipNxCache?: boolean;
  /**
   * For `lerna version`, the branches to allow versioning from.
   */
  allowBranch?: string | string[];
  /**
   * During `lerna version`, when true, amend the existing commit instead of generating a new one.
   */
  amend?: boolean;
  /**
   * During `lerna version`, version changed packages as prereleases when using --conventional-commits.
   */
  conventionalPrerelease?: string | boolean | string[];
  /**
   * During `lerna version`, bumps version of changed prereleased packages when using --conventional-commits.
   */
  conventionalBumpPrerelease?: boolean;
  /**
   * For `lerna version`, the custom conventional-changelog preset.
   */
  changelogPreset?: string | ConventionalChangelogConfiguration;
  /**
   * During `lerna version`, push git changes to the specified remote.
   */
  gitRemote?: string;
  /**
   * During `lerna version`, an official GitHub or GitLab release for every version.
   */
  createRelease?: "github" | "gitlab";
  /**
   * For `lerna version`, the custom commit message to use when creating the version commit.
   */
  message?: string;
  /**
   * During `lerna version`, when true, generate CHANGELOG.md files when using --conventional-commits.
   */
  changelog?: boolean;
  /**
   * During `lerna version`, when true, run git commit hooks when committing version changes.
   */
  commitHooks?: boolean;
  /**
   * During `lerna version`, when true, commit and tag version changes.
   */
  gitTagVersion?: boolean;
  /**
   * During `lerna version`, when true, push tagged commit to git remote.
   */
  push?: boolean;
  /**
   * During `lerna version`, when true, pass the `--gpg-sign` flag to `git commit`.
   */
  signGitCommit?: boolean;
  /**
   * During `lerna version`, when true, pass the `--sign` flag to `git tag`.
   */
  signGitTag?: boolean;
  /**
   * During `lerna version`, when true, pass the `--force` flag to `git tag`.
   */
  forceGitTag?: boolean;
  /**
   * During `lerna version`, customize the tag prefix. To remove entirely, pass an empty string.
   */
  tagVersionPrefix?: string;
  /**
   * The npm registry to use for all npm client operations. During `lerna create`, specifies the new package's publishConfig.registry.
   */
  registry?: string;
  /**
   * During `lerna version`, `lerna changed`, and `lerna publish`, when true, use conventional commits specification to determine the version bump and generate CHANGELOG.md files.
   */
  conventionalCommits?: boolean;
  /**
   * Detect currently prereleased packages that would change to a non-prerelease version. Relevant for `lerna changed` and `lerna version`.
   */
  conventionalGraduate?: string | boolean | string[];
  /**
   * During `lerna bootstrap` and `lerna link`, when true, force local sibling links regardless of version range match.
   */
  forceLocal?: boolean;
  /**
   * For `lerna bootstrap`, `lerna link`, and `lerna publish`, the subdirectory to use as the source of any links. Must apply to ALL packages.
   */
  contents?: string;
  ignoreChanges?: IgnoreChanges;
  /**
   * During `lerna exec` and `lerna run`, stream output with lines prefixed by originating package name.
   */
  stream?: boolean;
  /**
   * During `lerna exec` and `lerna run`, run commands with unlimited concurrency, streaming prefixed output.
   */
  parallel?: boolean;
  /**
   * During `lerna exec` and `lerna run`, exit with non-zero status if any command fails.
   */
  bail?: boolean;
  /**
   * During `lerna exec` and `lerna run`, prefix output with originating package name.
   */
  prefix?: boolean;
  /**
   * During `lerna exec` and `lerna run`, profile command execution and output performance profile to default location.
   */
  profile?: boolean;
  /**
   * During `lerna exec` and `lerna run`, profile command execution and output performance profile to the specified location instead of default project root.
   */
  profileLocation?: string;
  /**
   * For `lerna publish` and `lerna version`, the prerelease identifier when versioning a prerelease.
   */
  preid?: string;
  /**
   * During `lerna bootstrap`, `lerna publish`, and `lerna version`, don't run ANY lifecycle scripts in bootstrapped packages.
   */
  ignoreScripts?: boolean;
  /**
   * During `lerna publish` and `lerna version`, when true, reset changes file-by-file, not globally.
   */
  granularPathspec?: boolean;
  /**
   * During `lerna changed` and `lerna version`, always include targeted packages when detecting changed packages, skipping default logic.
   */
  forcePublish?: string | boolean | string[];
  /**
   * During `lerna add`, save the exact version of the newly added package. During `lerna version`, specify cross-dependency version numbers exactly rather than with a caret (^).
   */
  exact?: boolean;
  /**
   * During `lerna publish` and `lerna bootstrap`, when true, disable deprecated 'prepublish' lifecycle script.
   */
  ignorePrepublish?: boolean;
  /**
   * When true, escalates loglevel to 'verbose' and shows nx verbose output if useNx is true.
   */
  verbose?: boolean;
}
/**
 * Describes the configuration options supported by conventional-config for upstream tooling.
 */
export interface ConventionalChangelogConfiguration {
  /**
   * A string to be used as the main header section of the CHANGELOG.
   */
  header?: string;
  /**
   * An array of `type` objects representing the explicitly supported commit message types, and whether they should show up in generated `CHANGELOG`s.
   */
  types?: Type[];
  /**
   * Boolean indicating whether or not the action being run (generating CHANGELOG, recommendedBump, etc.) is being performed for a pre-major release (<1.0.0).
   *  This config setting will generally be set by tooling and not a user.
   */
  preMajor?: boolean;
  /**
   * A URL representing a specific commit at a hash.
   */
  commitUrlFormat?: string;
  /**
   * A URL representing the comparison between two git SHAs.
   */
  compareUrlFormat?: string;
  /**
   * A URL representing the issue format (allowing a different URL format to be swapped in for Gitlab, Bitbucket, etc).
   */
  issueUrlFormat?: string;
  /**
   * A URL representing the a user's profile URL on GitHub, Gitlab, etc. This URL is used for substituting @bcoe with https://github.com/bcoe in commit messages.
   */
  userUrlFormat?: string;
  /**
   * A string to be used to format the auto-generated release commit message.
   */
  releaseCommitMessageFormat?: string;
  /**
   * An array of prefixes used to detect references to issues
   */
  issuePrefixes?: string[];
  [k: string]: unknown | undefined;
}

export type { Lerna as default };
