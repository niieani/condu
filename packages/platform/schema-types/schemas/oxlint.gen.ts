/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/

export type AllowWarnDeny = (("allow" | "off" | "warn" | "error" | "deny") | number)
export type GlobalValue = ("readonly" | "writeable" | "off") | undefined
export type GlobSet = string[]
export type LintPluginOptionsSchema = ("eslint" | "react" | "unicorn" | "typescript" | "oxc" | "import" | "jsdoc" | "jest" | "vitest" | "jsx-a11y" | "nextjs" | "react-perf" | "promise" | "node")
export type LintPlugins = LintPluginOptionsSchema[]
export type DummyRule = (AllowWarnDeny | unknown[]) | undefined
export type OxlintOverrides = OxlintOverride[]
export type TagNamePreference = (string | {
message: string
replacement: string
[k: string]: unknown | undefined
} | {
message: string
[k: string]: unknown | undefined
} | boolean) | undefined
export type OneOrManyFor_String = (string | string[])
export type CustomComponent = (string | {
attribute: string
name: string
[k: string]: unknown | undefined
} | {
attributes: string[]
name: string
[k: string]: unknown | undefined
})

/**
 * Oxlint Configuration File
 * 
 * This configuration is aligned with ESLint v8's configuration schema (`eslintrc.json`).
 * 
 * Usage: `oxlint -c oxlintrc.json --import-plugin`
 * 
 * ::: danger NOTE
 * 
 * Only the `.json` format is supported. You can use comments in configuration files.
 * 
 * :::
 * 
 * Example
 * 
 * `.oxlintrc.json`
 * 
 * ```json
 * {
 * "$schema": "./node_modules/oxlint/configuration_schema.json",
 * "plugins": ["import", "typescript", "unicorn"],
 * "env": {
 * "browser": true
 * },
 * "globals": {
 * "foo": "readonly"
 * },
 * "settings": {
 * },
 * "rules": {
 * "eqeqeq": "warn",
 * "import/no-cycle": "error",
 * "react/self-closing-comp": ["error", { "html": false }]
 * },
 * "overrides": [
 * {
 * "files": ["*.test.ts", "*.spec.ts"],
 * "rules": {
 * "@typescript-eslint/no-explicit-any": "off"
 * }
 * }
 * ]
 * }
 * ```
 */
export interface Oxlintrc {
categories?: RuleCategories
/**
 * Environments enable and disable collections of global variables.
 */
env?: OxlintEnv
/**
 * Paths of configuration files that this configuration file extends (inherits from). The files
 * are resolved relative to the location of the configuration file that contains the `extends`
 * property. The configuration files are merged from the first to the last, with the last file
 * overriding the previous ones.
 */
extends?: string[]
/**
 * Enabled or disabled specific global variables.
 */
globals?: OxlintGlobals
/**
 * Globs to ignore during linting. These are resolved from the configuration file path.
 */
ignorePatterns?: string[]
/**
 * Add, remove, or otherwise reconfigure rules for specific files or groups of files.
 */
overrides?: OxlintOverrides
plugins?: (LintPlugins | null)
/**
 * Example
 * 
 * `.oxlintrc.json`
 * 
 * ```json
 * {
 * "$schema": "./node_modules/oxlint/configuration_schema.json",
 * "rules": {
 * "eqeqeq": "warn",
 * "import/no-cycle": "error",
 * "prefer-const": ["error", { "ignoreReadBeforeAssign": true }]
 * }
 * }
 * ```
 * 
 * See [Oxlint Rules](https://oxc.rs/docs/guide/usage/linter/rules.html) for the list of
 * rules.
 */
rules?: DummyRuleMap
settings?: OxlintPluginSettings
[k: string]: unknown | undefined
}
/**
 * Configure an entire category of rules all at once.
 * 
 * Rules enabled or disabled this way will be overwritten by individual rules in the `rules` field.
 * 
 * Example
 * ```json
 * {
 *     "$schema": "./node_modules/oxlint/configuration_schema.json",
 *     "categories": {
 *         "correctness": "warn"
 *     },
 *     "rules": {
 *         "eslint/no-unused-vars": "error"
 *     }
 * }
 * ```
 */
export interface RuleCategories {
correctness?: AllowWarnDeny
nursery?: AllowWarnDeny
pedantic?: AllowWarnDeny
perf?: AllowWarnDeny
restriction?: AllowWarnDeny
style?: AllowWarnDeny
suspicious?: AllowWarnDeny
[k: string]: unknown | undefined
}
/**
 * Predefine global variables.
 * 
 * Environments specify what global variables are predefined. See [ESLint's
 * list of
 * environments](https://eslint.org/docs/v8.x/use/configure/language-options#specifying-environments)
 * for what environments are available and what each one provides.
 */
export interface OxlintEnv {
[k: string]: boolean | undefined
}
/**
 * Add or remove global variables.
 * 
 * For each global variable, set the corresponding value equal to `"writable"`
 * to allow the variable to be overwritten or `"readonly"` to disallow overwriting.
 * 
 * Globals can be disabled by setting their value to `"off"`. For example, in
 * an environment where most Es2015 globals are available but `Promise` is unavailable,
 * you might use this config:
 * 
 * ```json
 * 
 * {
 * "$schema": "./node_modules/oxlint/configuration_schema.json",
 * "env": {
 * "es6": true
 * },
 * "globals": {
 * "Promise": "off"
 * }
 * }
 * 
 * ```
 * 
 * You may also use `"readable"` or `false` to represent `"readonly"`, and
 * `"writeable"` or `true` to represent `"writable"`.
 */
export interface OxlintGlobals {
[k: string]: GlobalValue | undefined
}
export interface OxlintOverride {
/**
 * Environments enable and disable collections of global variables.
 */
env?: (OxlintEnv | null)
/**
 * A list of glob patterns to override.
 * 
 * ## Example
 * `[ "*.test.ts", "*.spec.ts" ]`
 */
files: GlobSet
/**
 * Enabled or disabled specific global variables.
 */
globals?: (OxlintGlobals | null)
/**
 * Optionally change what plugins are enabled for this override. When
 * omitted, the base config's plugins are used.
 */
plugins?: (LintPlugins | null)
rules?: DummyRuleMap
[k: string]: unknown | undefined
}
/**
 * See [Oxlint Rules](https://oxc.rs/docs/guide/usage/linter/rules.html)
 */
export interface DummyRuleMap {
[k: string]: DummyRule | undefined
}
/**
 * Configure the behavior of linter plugins.
 * 
 * Here's an example if you're using Next.js in a monorepo:
 * 
 * ```json
 * {
 * "settings": {
 * "next": {
 * "rootDir": "apps/dashboard/"
 * },
 * "react": {
 * "linkComponents": [
 * { "name": "Link", "linkAttribute": "to" }
 * ]
 * },
 * "jsx-a11y": {
 * "components": {
 * "Link": "a",
 * "Button": "button"
 * }
 * }
 * }
 * }
 * ```
 */
export interface OxlintPluginSettings {
jsdoc?: JSDocPluginSettings
"jsx-a11y"?: JSXA11YPluginSettings
next?: NextPluginSettings
react?: ReactPluginSettings
[k: string]: unknown | undefined
}
export interface JSDocPluginSettings {
/**
 * Only for `require-(yields|returns|description|example|param|throws)` rule
 */
augmentsExtendsReplacesDocs?: boolean
/**
 * Only for `require-param-type` and `require-param-description` rule
 */
exemptDestructuredRootsFromChecks?: boolean
/**
 * For all rules but NOT apply to `empty-tags` rule
 */
ignoreInternal?: boolean
/**
 * For all rules but NOT apply to `check-access` and `empty-tags` rule
 */
ignorePrivate?: boolean
/**
 * Only for `require-(yields|returns|description|example|param|throws)` rule
 */
ignoreReplacesDocs?: boolean
/**
 * Only for `require-(yields|returns|description|example|param|throws)` rule
 */
implementsReplacesDocs?: boolean
/**
 * Only for `require-(yields|returns|description|example|param|throws)` rule
 */
overrideReplacesDocs?: boolean
tagNamePreference?: {
[k: string]: TagNamePreference | undefined
}
[k: string]: unknown | undefined
}
/**
 * Configure JSX A11y plugin rules.
 * 
 * See
 * [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y#configurations)'s
 * configuration for a full reference.
 */
export interface JSXA11YPluginSettings {
/**
 * To have your custom components be checked as DOM elements, you can
 * provide a mapping of your component names to the DOM element name.
 * 
 * Example:
 * 
 * ```json
 * {
 * "settings": {
 * "jsx-a11y": {
 * "components": {
 * "Link": "a",
 * "IconButton": "button"
 * }
 * }
 * }
 * }
 * ```
 */
components?: {
[k: string]: string | undefined
}
/**
 * An optional setting that define the prop your code uses to create polymorphic components.
 * This setting will be used to determine the element type in rules that
 * require semantic context.
 * 
 * For example, if you set the `polymorphicPropName` to `as`, then this element:
 * 
 * ```jsx
 * <Box as="h3">Hello</Box>
 * ```
 * 
 * Will be treated as an `h3`. If not set, this component will be treated
 * as a `Box`.
 */
polymorphicPropName?: (string | null)
[k: string]: unknown | undefined
}
/**
 * Configure Next.js plugin rules.
 */
export interface NextPluginSettings {
/**
 * The root directory of the Next.js project.
 * 
 * This is particularly useful when you have a monorepo and your Next.js
 * project is in a subfolder.
 * 
 * Example:
 * 
 * ```json
 * {
 * "settings": {
 * "next": {
 * "rootDir": "apps/dashboard/"
 * }
 * }
 * }
 * ```
 */
rootDir?: OneOrManyFor_String
[k: string]: unknown | undefined
}
/**
 * Configure React plugin rules.
 * 
 * Derived from [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react#configuration-legacy-eslintrc-)
 */
export interface ReactPluginSettings {
/**
 * Components used as alternatives to `<form>` for forms, such as `<Formik>`.
 * 
 * Example:
 * 
 * ```jsonc
 * {
 * "settings": {
 * "react": {
 * "formComponents": [
 * "CustomForm",
 * // OtherForm is considered a form component and has an endpoint attribute
 * { "name": "OtherForm", "formAttribute": "endpoint" },
 * // allows specifying multiple properties if necessary
 * { "name": "Form", "formAttribute": ["registerEndpoint", "loginEndpoint"] }
 * ]
 * }
 * }
 * }
 * ```
 */
formComponents?: CustomComponent[]
/**
 * Components used as alternatives to `<a>` for linking, such as `<Link>`.
 * 
 * Example:
 * 
 * ```jsonc
 * {
 * "settings": {
 * "react": {
 * "linkComponents": [
 * "HyperLink",
 * // Use `linkAttribute` for components that use a different prop name
 * // than `href`.
 * { "name": "MyLink", "linkAttribute": "to" },
 * // allows specifying multiple properties if necessary
 * { "name": "Link", "linkAttribute": ["to", "href"] }
 * ]
 * }
 * }
 * }
 * ```
 */
linkComponents?: CustomComponent[]
[k: string]: unknown | undefined
}

export type { Oxlintrc as default };
